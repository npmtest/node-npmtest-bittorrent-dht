{"/home/travis/build/npmtest/node-npmtest-bittorrent-dht/test.js":"/* istanbul instrument in package npmtest_bittorrent_dht */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bittorrent-dht/lib.npmtest_bittorrent_dht.js":"/* istanbul instrument in package npmtest_bittorrent_dht */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bittorrent_dht = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bittorrent_dht = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bittorrent-dht/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bittorrent-dht && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bittorrent_dht */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bittorrent_dht\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bittorrent_dht.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_bittorrent_dht.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bittorrent_dht.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_bittorrent_dht.__dirname + '/lib.npmtest_bittorrent_dht.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bittorrent-dht/node_modules/bittorrent-dht/index.js":"var Client = require('./client')\nvar Server = require('./server')\n\nmodule.exports = Client\nmodule.exports.Client = Client\nmodule.exports.Server = Server\n","/home/travis/build/npmtest/node-npmtest-bittorrent-dht/node_modules/bittorrent-dht/client.js":"module.exports = DHT\n\nvar bencode = require('bencode')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar debug = require('debug')('bittorrent-dht')\nvar equals = require('buffer-equals')\nvar EventEmitter = require('events').EventEmitter\nvar inherits = require('inherits')\nvar KBucket = require('k-bucket')\nvar krpc = require('k-rpc')\nvar LRU = require('lru')\n\nvar ROTATE_INTERVAL = 5 * 60 * 1000 // rotate secrets every 5 minutes\n\ninherits(DHT, EventEmitter)\n\nfunction DHT (opts) {\n  if (!(this instanceof DHT)) return new DHT(opts)\n  if (!opts) opts = {}\n\n  var self = this\n\n  this._tables = LRU({maxAge: ROTATE_INTERVAL, max: opts.maxTables || 1000})\n  this._values = LRU(opts.maxValues || 1000)\n  this._peers = new PeerStore(opts.maxPeers || 10000)\n\n  this._secrets = null\n  this._rpc = krpc(opts)\n  this._rpc.on('query', onquery)\n  this._rpc.on('node', onnode)\n  this._rpc.on('warning', onwarning)\n  this._rpc.on('error', onerror)\n  this._rpc.on('listening', onlistening)\n  this._rotateSecrets()\n  this._verify = opts.verify || null\n  this._host = opts.host || null\n  this._interval = setInterval(rotateSecrets, ROTATE_INTERVAL)\n  this._hash = opts.hash || sha1\n\n  this.listening = false\n  this.destroyed = false\n  this.nodeId = this._rpc.id\n  this.nodes = this._rpc.nodes\n\n  process.nextTick(bootstrap)\n\n  EventEmitter.call(this)\n  this._debug('new DHT %s', this.nodeId)\n\n  function onlistening () {\n    self.listening = true\n    self._debug('listening %d', self.address().port)\n    self.emit('listening')\n  }\n\n  function onquery (query, peer) {\n    self._onquery(query, peer)\n  }\n\n  function rotateSecrets () {\n    self._rotateSecrets()\n  }\n\n  function bootstrap () {\n    if (!self.destroyed) self._bootstrap(opts.bootstrap !== false)\n  }\n\n  function onwarning (err) {\n    self.emit('warning', err)\n  }\n\n  function onerror (err) {\n    self.emit('error', err)\n  }\n\n  function onnode (node) {\n    self.emit('node', node)\n  }\n}\n\nDHT.prototype.addNode = function (node) {\n  var self = this\n  if (node.id) {\n    node.id = toBuffer(node.id)\n    var old = !!this._rpc.nodes.get(node.id)\n    this._rpc.nodes.add(node)\n    if (!old) this.emit('node', node)\n    return\n  }\n  this._sendPing(node, function (_, node) {\n    if (node) self.addNode(node)\n  })\n}\n\nDHT.prototype.removeNode = function (id) {\n  this._rpc.nodes.remove(toBuffer(id))\n}\n\nDHT.prototype._sendPing = function (node, cb) {\n  this._rpc.query(node, {q: 'ping'}, function (err, pong, node) {\n    if (err) return cb(err)\n    if (!pong.r || !pong.r.id || !Buffer.isBuffer(pong.r.id) || pong.r.id.length !== 20) {\n      return cb(new Error('Bad reply'))\n    }\n    cb(null, {\n      id: pong.r.id,\n      host: node.host || node.address,\n      port: node.port\n    })\n  })\n}\n\nDHT.prototype.toJSON = function () {\n  var self = this\n  var values = {}\n  Object.keys(this._values.cache).forEach(function (key) {\n    var value = self._values.cache[key].value\n    values[key] = {\n      v: value.v.toString('hex'),\n      id: value.id.toString('hex')\n    }\n    if (value.seq != null) values[key].seq = value.seq\n    if (value.sig != null) values[key].sig = value.sig.toString('hex')\n    if (value.k != null) values[key].k = value.k.toString('hex')\n  })\n  return {\n    nodes: this._rpc.nodes.toArray().map(toNode),\n    values: values\n  }\n}\n\nDHT.prototype.put = function (opts, cb) {\n  if (Buffer.isBuffer(opts) || typeof opts === 'string') opts = {v: opts}\n  var isMutable = !!opts.k\n  if (opts.v === undefined) {\n    throw new Error('opts.v not given')\n  }\n  if (opts.v.length >= 1000) {\n    throw new Error('v must be less than 1000 bytes in put()')\n  }\n  if (isMutable && opts.cas !== undefined && typeof opts.cas !== 'number') {\n    throw new Error('opts.cas must be an integer if provided')\n  }\n  if (isMutable && !opts.k) {\n    throw new Error('opts.k ed25519 public key required for mutable put')\n  }\n  if (isMutable && opts.k.length !== 32) {\n    throw new Error('opts.k ed25519 public key must be 32 bytes')\n  }\n  if (isMutable && typeof opts.sign !== 'function' && !Buffer.isBuffer(opts.sig)) {\n    throw new Error('opts.sign function or options.sig signature is required for mutable put')\n  }\n  if (isMutable && opts.salt && opts.salt.length > 64) {\n    throw new Error('opts.salt is > 64 bytes long')\n  }\n  if (isMutable && opts.seq === undefined) {\n    throw new Error('opts.seq not provided for a mutable update')\n  }\n  if (isMutable && typeof opts.seq !== 'number') {\n    throw new Error('opts.seq not an integer')\n  }\n\n  return this._put(opts, cb)\n}\n\nDHT.prototype._put = function (opts, cb) {\n  if (!cb) cb = noop\n\n  var isMutable = !!opts.k\n  var v = typeof opts.v === 'string' ? Buffer.from(opts.v) : opts.v\n  var key = isMutable\n    ? this._hash(opts.salt ? Buffer.concat([opts.k, opts.salt]) : opts.k)\n    : this._hash(bencode.encode(v))\n\n  var table = this._tables.get(key.toString('hex'))\n  if (!table) return this._preput(key, opts, cb)\n\n  var message = {\n    q: 'put',\n    a: {\n      id: this._rpc.id,\n      token: null, // queryAll sets this\n      v: v\n    }\n  }\n\n  if (isMutable) {\n    if (typeof opts.cas === 'number') message.a.cas = opts.cas\n    if (opts.salt) message.a.salt = opts.salt\n    message.a.k = opts.k\n    message.a.seq = opts.seq\n    if (typeof opts.sign === 'function') message.a.sig = opts.sign(encodeSigData(message.a))\n    else if (Buffer.isBuffer(opts.sig)) message.a.sig = opts.sig\n  }\n\n  this._values.set(key.toString('hex'), message.a)\n  this._rpc.queryAll(table.closest(key), message, null, function (err, n) {\n    if (err) return cb(err, key, n)\n    cb(null, key, n)\n  })\n\n  return key\n}\n\nDHT.prototype._preput = function (key, opts, cb) {\n  var self = this\n\n  this._closest(key, {\n    q: 'get',\n    a: {\n      id: this._rpc.id,\n      target: key\n    }\n  }, null, function (err, n) {\n    if (err) return cb(err)\n    self.put(opts, cb)\n  })\n\n  return key\n}\n\nDHT.prototype.get = function (key, opts, cb) {\n  key = toBuffer(key)\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = null\n  }\n\n  if (!opts) opts = {}\n  var verify = opts.verify || this._verify\n  var hash = this._hash\n  var value = this._values.get(key.toString('hex')) || null\n\n  if (value) {\n    value = createGetResponse(this._rpc.id, null, value)\n    return process.nextTick(done)\n  }\n\n  this._closest(key, {\n    q: 'get',\n    a: {\n      id: this._rpc.id,\n      target: key\n    }\n  }, onreply, done)\n\n  function done (err) {\n    if (err) return cb(err)\n    cb(null, value)\n  }\n\n  function onreply (message) {\n    var r = message.r\n    if (!r || !r.v) return true\n\n    var isMutable = r.k || r.sig\n\n    if (isMutable) {\n      if (!verify || !r.sig || !r.k) return true\n      if (!verify(r.sig, encodeSigData(r), r.k)) return true\n      if (equals(hash(r.salt ? Buffer.concat([r.k, r.salt]) : r.k), key)) {\n        value = r\n        return false\n      }\n    } else {\n      if (equals(hash(bencode.encode(r.v)), key)) {\n        value = r\n        return false\n      }\n    }\n\n    return true\n  }\n}\n\nDHT.prototype.announce = function (infoHash, port, cb) {\n  if (typeof port === 'function') return this.announce(infoHash, 0, port)\n  infoHash = toBuffer(infoHash)\n  if (!cb) cb = noop\n\n  var table = this._tables.get(infoHash.toString('hex'))\n  if (!table) return this._preannounce(infoHash, port, cb)\n\n  if (this._host) {\n    var dhtPort = this.listening ? this.address().port : 0\n    this._addPeer(\n      {host: this._host, port: port || dhtPort},\n      infoHash,\n      {host: this._host, port: dhtPort}\n    )\n  }\n\n  var message = {\n    q: 'announce_peer',\n    a: {\n      id: this._rpc.id,\n      token: null, // queryAll sets this\n      info_hash: infoHash,\n      port: port,\n      implied_port: port ? 0 : 1\n    }\n  }\n\n  this._debug('announce %s %d', infoHash, port)\n  this._rpc.queryAll(table.closest(infoHash), message, null, cb)\n}\n\nDHT.prototype._preannounce = function (infoHash, port, cb) {\n  var self = this\n\n  this.lookup(infoHash, function (err) {\n    if (self.destroyed) return cb(new Error('dht is destroyed'))\n    if (err) return cb(err)\n    self.announce(infoHash, port, cb)\n  })\n}\n\nDHT.prototype.lookup = function (infoHash, cb) {\n  infoHash = toBuffer(infoHash)\n  if (!cb) cb = noop\n  var self = this\n  var aborted = false\n\n  this._debug('lookup %s', infoHash)\n  process.nextTick(emit)\n  this._closest(infoHash, {\n    q: 'get_peers',\n    a: {\n      id: this._rpc.id,\n      info_hash: infoHash\n    }\n  }, onreply, cb)\n\n  function emit (values, from) {\n    if (!values) values = self._peers.get(infoHash.toString('hex'))\n    var peers = decodePeers(values)\n    for (var i = 0; i < peers.length; i++) {\n      self.emit('peer', peers[i], infoHash, from || null)\n    }\n  }\n\n  function onreply (message, node) {\n    if (aborted) return false\n    if (message.r.values) emit(message.r.values, node)\n  }\n\n  return function abort () { aborted = true }\n}\n\nDHT.prototype.address = function () {\n  return this._rpc.address()\n}\n\nDHT.prototype.listen = function (port, cb) {\n  if (typeof port === 'function') return this.listen(0, port)\n  this._rpc.bind(port, cb)\n}\n\nDHT.prototype.destroy = function (cb) {\n  if (this.destroyed) {\n    if (cb) process.nextTick(cb)\n    return\n  }\n  this.destroyed = true\n  var self = this\n  clearInterval(this._interval)\n  this._debug('destroying')\n  this._rpc.destroy(function () {\n    self.emit('close')\n    if (cb) cb()\n  })\n}\n\nDHT.prototype._onquery = function (query, peer) {\n  var q = query.q.toString()\n  this._debug('received %s query from %s:%d', q, peer.address, peer.port)\n  if (!query.a) return\n\n  switch (q) {\n    case 'ping':\n      return this._rpc.response(peer, query, {id: this._rpc.id})\n\n    case 'find_node':\n      return this._onfindnode(query, peer)\n\n    case 'get_peers':\n      return this._ongetpeers(query, peer)\n\n    case 'announce_peer':\n      return this._onannouncepeer(query, peer)\n\n    case 'get':\n      return this._onget(query, peer)\n\n    case 'put':\n      return this._onput(query, peer)\n  }\n}\n\nDHT.prototype._onfindnode = function (query, peer) {\n  var target = query.a.target\n  if (!target) return this._rpc.error(peer, query, [203, '`find_node` missing required `a.target` field'])\n\n  this.emit('find_node', target)\n\n  var nodes = this._rpc.nodes.closest(target)\n  this._rpc.response(peer, query, {id: this._rpc.id}, nodes)\n}\n\nDHT.prototype._ongetpeers = function (query, peer) {\n  var host = peer.address || peer.host\n  var infoHash = query.a.info_hash\n  if (!infoHash) return this._rpc.error(peer, query, [203, '`get_peers` missing required `a.info_hash` field'])\n\n  this.emit('get_peers', infoHash)\n\n  var r = {id: this._rpc.id, token: this._generateToken(host)}\n  var peers = this._peers.get(infoHash.toString('hex'))\n\n  if (peers.length) {\n    r.values = peers\n    this._rpc.response(peer, query, r)\n  } else {\n    this._rpc.response(peer, query, r, this._rpc.nodes.closest(infoHash))\n  }\n}\n\nDHT.prototype._onannouncepeer = function (query, peer) {\n  var host = peer.address || peer.host\n  var port = query.a.implied_port ? peer.port : query.a.port\n  if (!port || typeof port !== 'number') return\n  var infoHash = query.a.info_hash\n  var token = query.a.token\n  if (!infoHash || !token) return\n\n  if (!this._validateToken(host, token)) {\n    return this._rpc.error(peer, query, [203, 'cannot `announce_peer` with bad token'])\n  }\n\n  this.emit('announce_peer', infoHash, {host: host, port: peer.port})\n\n  this._addPeer({host: host, port: port}, infoHash, {host: host, port: peer.port})\n  this._rpc.response(peer, query, {id: this._rpc.id})\n}\n\nDHT.prototype._addPeer = function (peer, infoHash, from) {\n  this._peers.add(infoHash.toString('hex'), encodePeer(peer.host, peer.port))\n  this.emit('announce', peer, infoHash, from)\n}\n\nDHT.prototype._onget = function (query, peer) {\n  var host = peer.address || peer.host\n  var target = query.a.target\n  if (!target) return\n  var token = this._generateToken(host)\n  var value = this._values.get(target.toString('hex'))\n\n  this.emit('get', target, value)\n\n  if (!value) {\n    var nodes = this._rpc.nodes.closest(target)\n    this._rpc.response(peer, query, {id: this._rpc.id, token: token}, nodes)\n  } else {\n    this._rpc.response(peer, query, createGetResponse(this._rpc.id, token, value))\n  }\n}\n\nDHT.prototype._onput = function (query, peer) {\n  var host = peer.address || peer.host\n\n  var a = query.a\n  if (!a) return\n  var v = query.a.v\n  if (!v) return\n  var id = query.a.id\n  if (!id) return\n\n  var token = a.token\n  if (!token) return\n\n  if (!this._validateToken(host, token)) {\n    return this._rpc.error(peer, query, [203, 'cannot `put` with bad token'])\n  }\n  if (v.length > 1000) {\n    return this._rpc.error(peer, query, [205, 'data payload too large'])\n  }\n\n  var isMutable = !!(a.k || a.sig)\n  if (isMutable && !a.k && !a.sig) return\n\n  var key = isMutable\n    ? this._hash(a.salt ? Buffer.concat([a.k, a.salt]) : a.k)\n    : this._hash(bencode.encode(v))\n  var keyHex = key.toString('hex')\n\n  this.emit('put', key, v)\n\n  if (isMutable) {\n    if (!this._verify) return this._rpc.error(peer, query, [400, 'verification not supported'])\n    if (!this._verify(a.sig, encodeSigData(a), a.k)) return\n    var prev = this._values.get(keyHex)\n    if (prev && typeof a.cas === 'number' && prev.seq !== a.cas) {\n      return this._rpc.error(peer, query, [301, 'CAS mismatch, re-read and try again'])\n    }\n    if (prev && typeof prev.seq === 'number' && !(a.seq > prev.seq)) {\n      return this._rpc.error(peer, query, [302, 'sequence number less than current'])\n    }\n    this._values.set(keyHex, {v: v, k: a.k, salt: a.salt, sig: a.sig, seq: a.seq, id: id})\n  } else {\n    this._values.set(keyHex, {v: v, id: id})\n  }\n\n  this._rpc.response(peer, query, {id: this._rpc.id})\n}\n\nDHT.prototype._bootstrap = function (populate) {\n  var self = this\n  if (!populate) return process.nextTick(ready)\n\n  this._rpc.populate(self._rpc.id, {\n    q: 'find_node',\n    a: {\n      id: self._rpc.id,\n      target: self._rpc.id\n    }\n  }, ready)\n\n  function ready () {\n    self._debug('emit ready')\n    self.ready = true\n    self.emit('ready')\n  }\n}\n\nDHT.prototype._closest = function (target, message, onmessage, cb) {\n  var self = this\n\n  var table = new KBucket({\n    localNodeId: target,\n    numberOfNodesPerKBucket: this._rpc.k\n  })\n\n  this._rpc.closest(target, message, onreply, done)\n\n  function done (err, n) {\n    if (err) return cb(err)\n    self._tables.set(target.toString('hex'), table)\n    self._debug('visited %d nodes', n)\n    cb(null, n)\n  }\n\n  function onreply (message, node) {\n    if (!message.r) return true\n\n    if (message.r.token && message.r.id && Buffer.isBuffer(message.r.id) && message.r.id.length === 20) {\n      self._debug('found node %s (target: %s)', message.r.id, target)\n      table.add({\n        id: message.r.id,\n        host: node.host || node.address,\n        port: node.port,\n        token: message.r.token\n      })\n    }\n\n    if (!onmessage) return true\n    return onmessage(message, node)\n  }\n}\n\nDHT.prototype._debug = function () {\n  if (!debug.enabled) return\n  var args = [].slice.call(arguments)\n  args[0] = '[' + this.nodeId.toString('hex').substring(0, 7) + '] ' + args[0]\n  for (var i = 1; i < args.length; i++) {\n    if (Buffer.isBuffer(args[i])) args[i] = args[i].toString('hex')\n  }\n  debug.apply(null, args)\n}\n\nDHT.prototype._validateToken = function (host, token) {\n  var tokenA = this._generateToken(host, this._secrets[0])\n  var tokenB = this._generateToken(host, this._secrets[1])\n  return equals(token, tokenA) || equals(token, tokenB)\n}\n\nDHT.prototype._generateToken = function (host, secret) {\n  if (!secret) secret = this._secrets[0]\n  return crypto.createHash('sha1').update(Buffer.from(host)).update(secret).digest()\n}\n\nDHT.prototype._rotateSecrets = function () {\n  if (!this._secrets) {\n    this._secrets = [crypto.randomBytes(20), crypto.randomBytes(20)]\n  } else {\n    this._secrets[1] = this._secrets[0]\n    this._secrets[0] = crypto.randomBytes(20)\n  }\n}\n\nfunction noop () {}\n\nfunction sha1 (buf) {\n  return crypto.createHash('sha1').update(buf).digest()\n}\n\nfunction createGetResponse (id, token, value) {\n  var r = {id: id, token: token, v: value.v}\n  if (value.sig) {\n    r.sig = value.sig\n    r.k = value.k\n    if (value.salt) r.salt = value.salt\n    if (typeof value.seq === 'number') r.seq = value.seq\n  }\n  return r\n}\n\nfunction encodePeer (host, port) {\n  var buf = Buffer.allocUnsafe(6)\n  var ip = host.split('.')\n  for (var i = 0; i < 4; i++) buf[i] = parseInt(ip[i] || 0, 10)\n  buf.writeUInt16BE(port, 4)\n  return buf\n}\n\nfunction decodePeers (buf) {\n  var peers = []\n\n  try {\n    for (var i = 0; i < buf.length; i++) {\n      var port = buf[i].readUInt16BE(4)\n      if (!port) continue\n      peers.push({\n        host: parseIp(buf[i], 0),\n        port: port\n      })\n    }\n  } catch (err) {\n    // do nothing\n  }\n\n  return peers\n}\n\nfunction parseIp (buf, offset) {\n  return buf[offset++] + '.' + buf[offset++] + '.' + buf[offset++] + '.' + buf[offset++]\n}\n\nfunction encodeSigData (msg) {\n  var ref = { seq: msg.seq || 0, v: msg.v }\n  if (msg.salt) ref.salt = msg.salt\n  return bencode.encode(ref).slice(1, -1)\n}\n\nfunction toNode (node) {\n  return {\n    host: node.host,\n    port: node.port\n  }\n}\n\nfunction PeerStore (max) {\n  this.max = max || 10000\n  this.used = 0\n  this.peers = LRU(Infinity)\n}\n\nPeerStore.prototype.add = function (key, peer) {\n  var peers = this.peers.get(key)\n\n  if (!peers) {\n    peers = {\n      values: [],\n      map: LRU(Infinity)\n    }\n    this.peers.set(key, peers)\n  }\n\n  var id = peer.toString('hex')\n  if (peers.map.get(id)) return\n\n  var node = {index: peers.values.length, peer: peer}\n  peers.map.set(id, node)\n  peers.values.push(node)\n  if (++this.used > this.max) this._evict()\n}\n\nPeerStore.prototype._evict = function () {\n  var a = this.peers.peek(this.peers.tail)\n  var b = a.map.remove(a.map.tail)\n  var values = a.values\n  swap(values, b.index, values.length - 1)\n  values.pop()\n  this.used--\n  if (!values.length) this.peers.remove(this.peers.tail)\n}\n\nPeerStore.prototype.get = function (key) {\n  var node = this.peers.get(key)\n  if (!node) return []\n  return pick(node.values, 100)\n}\n\nfunction swap (list, a, b) {\n  if (a === b) return\n  var tmp = list[a]\n  list[a] = list[b]\n  list[b] = tmp\n  list[a].index = a\n  list[b].index = b\n}\n\nfunction pick (values, n) {\n  var len = Math.min(values.length, n)\n  var ptr = 0\n  var res = new Array(len)\n\n  for (var i = 0; i < len; i++) {\n    var next = ptr + (Math.random() * (values.length - ptr)) | 0\n    res[ptr] = values[next].peer\n    swap(values, ptr++, next)\n  }\n\n  return res\n}\n\nfunction toBuffer (str) {\n  if (Buffer.isBuffer(str)) return str\n  if (typeof str === 'string') return Buffer.from(str, 'hex')\n  throw new Error('Pass a buffer or a string')\n}\n","/home/travis/build/npmtest/node-npmtest-bittorrent-dht/node_modules/bittorrent-dht/server.js":"/**\n * TODO: DHT Bootstrap Server\n *\n * For now, just export the client, which will work just fine. But, later, it'll\n * be important to give out nodes evenly from across the DHT.\n */\nmodule.exports = require('./client')\n"}